function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 29-Apr-2020 12:58:05.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.00017795473069592;-4];
x1_step1.gain = [0.666627123516587;0.499999874539149];
x1_step1.ymin = -1;

% Layer 1
b1 = [11.711535079501015133;-1.7379443043831088733;22.274059604817214364;-4.3857804365697665716;-2.9820180961544791032;0.90500859552933277108;-2.4431792207346978429;-2.4308243424157689461;2.75250938204188067;19.521091375108941435];
IW1_1 = [0.65157504595036219719 -10.285002638113663664;-6.143541723188985948 -1.6748179206981916867;3.0846035067907893179 21.969752247598030692;2.8357920691662319435 -11.388423144438913681;3.9722596037667163849 7.1540397203335039933;-0.22851121719712597091 -13.899016238979527316;-4.9347893864440015577 -2.8245457624947678532;-2.3226463253953220089 0.08765376323294034322;5.585614174091253048 2.9822271757745189014;13.810214430092296212 -4.5188869134942635242];

% Layer 2
b2 = -0.6504700064206360155;
LW2_1 = [6.1691026010563252413 -0.80464435714513238285 11.837112052896685555 -0.327748853221494163 -0.53984968252543796829 -0.24739842308328643949 20.375729303804199333 1.9523011298731971497 17.366629894393970091 -14.242164711882052686];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.521671571590615;
y1_step1.xoffset = -1.97868699814984e-06;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
