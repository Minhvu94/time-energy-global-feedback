function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 29-Apr-2020 12:16:01.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.00017795473069592;-4];
x1_step1.gain = [0.666627123516587;0.49999862231401];
x1_step1.ymin = -1;

% Layer 1
b1 = [3.2470433773735707383;1.2240074608709781145;-0.75424826030296565627;0.77876679463790099422;0.66045556081595913067;-0.14627926997379434026;-7.9385282789115345636;6.207467565612750704;-11.413390484817133697;-6.4627203885849855425];
IW1_1 = [0.39960176978829042849 -1.1408014494731539834;-0.24024795742766064111 1.4052446475588762365;1.9205786659470742705 0.16322206047444837163;0.29542080134372400435 1.0284901185323525041;-1.8375877883668083612 -0.075172254283609588055;13.956320343405693052 10.20139763962214019;-1.9631348546969875635 6.8183630609316470128;5.6435007359929105775 -0.74581567809206639197;-7.4619430779561328748 4.5231966873753668423;-5.5308518149697638577 0.30702672888482251956];

% Layer 2
b2 = 26.961459952209160917;
LW2_1 = [34.505515409950767491 3.0528835801534239813 16.368015187058070126 -5.8673341055723282622 16.987304401445452839 0.093531916041212581625 13.218554896519362885 27.97491156826598413 -19.801497278965609183 94.236939290425027593];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.521669913650763;
y1_step1.xoffset = -1.41631335018632e-05;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
