function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 29-Apr-2020 12:50:02.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.00017795473069592;-4];
x1_step1.gain = [0.666627123516587;0.499999713834835];
x1_step1.ymin = -1;

% Layer 1
b1 = [-7.515238357413827508;3.6756016890499316752;-1.2381118211991002376;1.0730272668484277521;-3.4090541006579027083;-1.5740562422818393795;-1.981876304132400346;-3.3538249790525016536;-3.533948055310415004;27.935233498490568138];
IW1_1 = [11.415856474352196415 -7.6587745585838282736;-5.7102626999121381957 -5.4664416708419425461;9.3792383424824006255 3.5532936584098377963;-8.5518498956877273542 -3.1392183854535717913;5.2652368706668202236 5.2323455729363921307;-2.2309336324478636904 -0.0048889983318919083555;-2.0300819275590589186 -0.28494742080376367355;-3.4306029542597027415 1.1117221875121572339;-3.9370654951586838699 0.28451906663966680666;4.6722536582375608916 27.867733853875783723];

% Layer 2
b2 = 7.7740644893771291279;
LW2_1 = [-0.048149390676224326779 -1.4981567562476081346 5.0349571961916721463 5.45551517972495148 -1.5057598579314044329 -12.621283964663994936 36.911545259867466484 5.814047782429757838 -12.448375651265550346 9.249329459683503174];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.521671571590615;
y1_step1.xoffset = -1.97868699814984e-06;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
