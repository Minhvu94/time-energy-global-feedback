function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 03-May-2020 19:09:46.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-4.20700794035639;-4];
x1_step1.gain = [0.237698624337582;0.25];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.5127242880719169449;5.5631226843461361042;0.20460338688234652738;-0.022262451791618530217;-0.0051263791582676519407;-0.0050008733313624690112;0.076289788637519145853;0.03242498497113951994;3.932643965601339886;4.1148596242744419627];
IW1_1 = [-3.2937932638221836257 -0.39191664832559686138;-13.610043756907984402 -2.4608393980109695143;-2.1253950103777201619 -0.21488789174071051824;4.7462958562359753856 0.24141976865384962014;45.790882767681544863 -19.991847672903841016;44.086148974633736941 -20.725447249963909968;-2.8799569330825880442 -0.23717719710938692246;-3.8872607915924688449 -0.19812251690587123765;8.0456396503525891006 1.3604207203668208237;8.3730694628542732261 1.4404593036921005123];

% Layer 2
b2 = 0.084410604691189494719;
LW2_1 = [0.95044738925234051319 -0.17249915585103517413 -27.996741611746614353 -42.655892738191553804 -28.187685821732028302 28.329147044589877424 80.581030833647915301 -95.339643117408272133 7.7869012094421110604 -6.9824866479795506535];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.372452632362254;
y1_step1.xoffset = -2.68499439262336;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
